// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String @id
  name String

  maps                 Map[]
  scopePermissions     String[]
  uploadedCustomAssets CustomAsset[]
  playedGames          PlayedGameParticipant[]
}

model PlayedGame {
  id String @id @default(cuid())

  mapId String
  map   Map    @relation(fields: [mapId], references: [id])

  createdAt           DateTime                @default(now())
  highestWaveSurvived Int
  participants        PlayedGameParticipant[]
}

model PlayedGameParticipant {
  id String @id @default(cuid())

  playedGameId String
  playedGame   PlayedGame @relation(fields: [playedGameId], references: [id])

  userId   String?
  user     User?   @relation(fields: [userId], references: [id])
  username String  @default("Anonymous")

  kills         Int
  deaths        Int
  accuracy      Float
  wavesSurvived Int
  damageDealt   Int
  score         Int

  createdAt DateTime @default(now())
}

model Map {
  id    String @id @default(cuid())
  name  String
  level Json

  verified  Boolean @default(false)
  published Boolean @default(false)

  plays PlayedGame[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model CustomAsset {
  id          String   @id @default(cuid())
  uploadId    String
  name        String
  description String?
  tags        String[]

  verified Boolean @default(false)

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String?
}
